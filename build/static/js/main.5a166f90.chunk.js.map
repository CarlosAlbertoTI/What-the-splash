{"version":3,"sources":["constants/index.js","reducers/errorReducer.js","reducers/imagesReducer.js","reducers/loadingReducer.js","reducers/pageReducer.js","reducers/statsReducer.js","reducers/index.js","api/index.js","actions/index.js","saga/imagesSaga.js","saga/statsSaga.js","saga/index.js","store/index.js","Components/Header/Header.jsx","Components/Button/Button.js","Components/Stats/Stats.js","Components/ImageGrid/ImageGrid.jsx","App.js","index.js"],"names":["IMAGES","LOAD","LOAD_SUCCESS","LOAD_FAILURE","STATS","errorReducer","state","action","type","LOAD_FAIL","error","imagesReducer","images","loadingReducer","pageReducer","statsReducer","id","isLoading","downloads","rootReducer","combineReducers","page","imageStats","key","url","fetchImages","a","fetch","response","json","data","status","Error","errors","fetchImageStats","loadImages","setImages","loadImagesStats","setImagesStats","setImageStatsError","handleImagesLoad","watchImagesLoad","getPage","select","call","put","toString","takeEvery","handleStatsRequest","watchStatsRequest","i","res","total","take","length","fork","rootSaga","all","imagesSaga","statsSaga","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","run","Header","Button","children","loading","props","className","disabled","Stats","stats","ImageGrid","useSelector","dispatch","useDispatch","useEffect","map","image","Math","ceil","height","width","src","urls","small","alt","user","username","JSON","stringfy","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a166f90.chunk.js","sourcesContent":["const IMAGES = {\n    LOAD: 'LOAD_IMAGES',\n    LOAD_SUCCESS: 'LOAD_SUCCESS',\n    LOAD_FAILURE: 'LOAD_FAILURE '\n}\n\nconst STATS = {\n    LOAD: 'LOAD_STATS',\n    LOAD_SUCCESS: 'STATS_SUCCESS',\n    LOAD_FAILURE: 'STATS_FAILURE '\n}\n\nexport { IMAGES, STATS }","import { IMAGES } from \"../constants\";\nconst errorReducer = (state = null, action) => {\n    switch (action.type) {\n        case IMAGES.LOAD_FAIL:\n            return action.error;\n        case IMAGES.LOAD:\n        case IMAGES.LOAD_SUCCESS:\n            return null;\n\n        default:\n            return state\n    }\n}\n\nexport default errorReducer","import { IMAGES } from \"../constants\";\nconst imagesReducer = (state = [], action) => {\n    if (action.type === IMAGES.LOAD_SUCCESS) {\n        return [...state, ...action.images]\n    }\n    return state\n}\n\nexport default imagesReducer","import { IMAGES } from \"../constants\";\nconst loadingReducer = (state = false, action) => {\n    switch (action.type) {\n        case IMAGES.LOAD:\n            return true;\n        case IMAGES.LOAD_SUCCESS:\n            return false;\n        case IMAGES.LOAD_FAILURE:\n            return false\n\n        default:\n            return state\n    }\n}\n\nexport default loadingReducer","import { IMAGES } from '../constants'\n\nconst pageReducer = (state = 1, action) => {\n    switch (action.type) {\n        case IMAGES.LOAD_SUCCESS:\n            return state + 1\n\n        default:\n            return state\n    }\n}\n\nexport default pageReducer","import { STATS } from '../constants';\n\nconst statsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case STATS.LOAD:\n            return {\n                ...state,\n                [action.id]: {\n                    isLoading: true,\n                    downloads: null,\n                    error: false,\n                },\n            };\n        case STATS.LOAD_SUCCESS:\n            return {\n                ...state,\n                [action.id]: {\n                    isLoading: false,\n                    downloads: action.downloads,\n                    error: false,\n                },\n            };\n        case STATS.LOAD_FAIL:\n            return {\n                ...state,\n                [action.id]: {\n                    isLoading: false,\n                    downloads: null,\n                    error: true,\n                },\n            };\n        default:\n            return state;\n    }\n};\n\nexport default statsReducer;","import { combineReducers } from \"redux\";\n\nimport errorReducer from \"./errorReducer\";\nimport imagesReducer from \"./imagesReducer\";\nimport loadingReducer from \"./loadingReducer\";\nimport pageReducer from \"./pageReducer\";\nimport statsReducer from \"./statsReducer\";\n\n\nconst rootReducer = combineReducers({\n    isLoading: loadingReducer,\n    images: imagesReducer,\n    error: errorReducer,\n    page: pageReducer,\n    imageStats: statsReducer\n})\n\nexport default rootReducer","const key = '?client_id=PvqALsj-uAHV4v4VoSZMebbWbIhwqdhKSMvfST1WCJI'\nconst url = 'https://api.unsplash.com/photos/'\n\nconst fetchImages = async page => {\n    const response = await fetch(`${url}${key}&per_page=3&page=${page}`)\n    const data = await response.json()\n    if (response.status >= 400) {\n        throw new Error(data.errors)\n    }\n\n    return data\n}\n\nconst fetchImageStats = async id => {\n    const response = await fetch(`${url}/${id}/statistics${key}`);\n    const data = await response.json();\n    if (response.status >= 400) {\n        throw new Error(data.errors);\n    }\n    return data;\n};\n\nexport { fetchImages, fetchImageStats };","import { IMAGES, STATS } from \"../constants/index\";\n\nconst loadImages = () => ({\n    type: IMAGES.LOAD,\n});\n\nconst setImages = images => ({\n    type: IMAGES.LOAD_SUCCESS,\n    images,\n});\n\nconst setError = error => ({\n    type: IMAGES.LOAD_FAILURE,\n    error,\n});\n\nconst loadImagesStats = id => ({\n    type: STATS.LOAD,\n    id\n});\n\nconst setImagesStats = (id, downloads) => ({\n    type: STATS.LOAD_SUCCESS,\n    id,\n    downloads\n});\n\nconst setImageStatsError = id => ({\n    type: IMAGES.LOAD_FAILURE,\n    id\n})\n\nexport {\n    loadImages,\n    setImages,\n    setError,\n    loadImagesStats,\n    setImagesStats,\n    setImageStatsError\n}","import { takeEvery, select, call, put } from 'redux-saga/effects'\n\nimport { IMAGES } from \"../constants\"\nimport { fetchImages } from \"../api\";\nimport { setImages, setError } from \"../actions\";\n\nconst getPage = state => state.page\n\nfunction* handleImagesLoad() {\n    try {\n        const page = yield select(getPage)\n\n        const images = yield call(fetchImages, page)\n        yield put(setImages(images))\n    } catch (error) {\n        yield put(setError(error.toString()))\n    }\n}\n\nexport default function* watchImagesLoad() {\n    yield takeEvery(IMAGES.LOAD, handleImagesLoad)\n}","import { take, fork, put, call } from \"redux-saga/effects\";\nimport { IMAGES } from \"../constants\";\nimport { fetchImageStats } from \"../api\";\nimport { loadImagesStats, setImageStatsError, setImagesStats } from \"../actions\";\n\nfunction* handleStatsRequest(id) {\n    for (let i = 0; i < 3; i++) {\n        try {\n            yield put(loadImagesStats(id))\n            const res = yield call(fetchImageStats, id)\n            yield put(setImagesStats(id, res.downloads.total))\n            return true\n        } catch (e) {}\n    }\n    yield put(setImageStatsError(id))\n}\n\nfunction* watchStatsRequest() {\n    while (true) {\n        const { images } = yield take(IMAGES.LOAD_SUCCESS)\n\n        for (let i = 0; i < images.length; i++) {\n            yield fork(handleStatsRequest, images[i].id)\n        }\n    }\n}\n\nexport default watchStatsRequest","import { all } from 'redux-saga/effects';\n\nimport imagesSaga from './imagesSaga';\nimport statsSaga from './statsSaga';\n\nexport default function* rootSaga() {\n    yield all([imagesSaga(), statsSaga()]);\n}","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootReducer from \"../reducers\";\nimport rootSaga from '../saga';\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware()\n    const store = createStore(rootReducer,\n        window.__REDUX_DEVTOOLS_EXTENSION__ ?\n        compose(\n            applyMiddleware(sagaMiddleware),\n            window.__REDUX_DEVTOOLS_EXTENSION__(),\n        ) :\n        applyMiddleware(sagaMiddleware), )\n    sagaMiddleware.run(rootSaga)\n\n    return store\n}\n\nexport default configureStore","import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => <header>What the Splash!</header>;\n\nexport default Header;\n","import React from 'react';\n\nimport './Button.css';\n\nconst Button = ({ children, loading = false, ...props }) => (\n    <button className=\"button\" disabled={loading} {...props}>\n        {loading ? 'Loading...' : children}\n    </button>\n);\n\nexport default Button"," \nimport React from 'react';\n\nimport './Stats.css';\n\nconst Stats = ({ stats }) => {\n    if (!stats) {\n        // loading not yet started\n        return <span className=\"stats\">Loading...</span>;\n    }\n    return (\n        <span className=\"stats\">\n            {stats.error && '🤯 Error!'}\n            {stats.isLoading && '🙄 Loading...'}\n            {stats.downloads !== null && `🤘 ${stats.downloads}`}\n        </span>\n    );\n};\n\nexport default Stats;","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Import css\nimport './ImageGrid.css'\n\n// Import components\nimport Button from \"../Button/Button\";\nimport Stats from \"../Stats/Stats\";\n\nimport { loadImages } from \"../../actions\";\n\nconst ImageGrid = () => {\n  const state = useSelector((state) => state)\n  const { images, error, isLoading, imageStats } = state\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(loadImages())\n  }, [dispatch])\n\n\n  return (\n    <div className=\"content\">\n      <section className=\"grid\">\n        {isLoading && <h1>Loading.....</h1>}\n        {!isLoading && (images.map(image => (\n          <div\n            key={image.id}\n            className={`item item-${Math.ceil(\n              image.height / image.width,\n            )}`}\n          >\n            <Stats stats={imageStats[image.id]}/>   \n            <img\n              src={image.urls.small}\n              alt={image.user.username}\n            />\n          </div>\n        )))}\n      </section>\n      {error && <div className='error'>{JSON.stringfy(error)}</div>}\n      <Button\n        onClick={() => !isLoading && dispatch(loadImages())}\n        loading={isLoading}\n      >\n        Load Images\n        </Button>\n    </div>\n  )\n}\n\nexport default ImageGrid\n","import React from 'react';\nimport { Provider } from \"react-redux\";\n\nimport configureStore from \"./store\";\n\n// Import components\nimport Header from \"./Components/Header/Header\";\nimport ImageGrid from \"./Components/ImageGrid/ImageGrid\";\n\nconst store = configureStore()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div> \n        <Header />\n        <ImageGrid />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}